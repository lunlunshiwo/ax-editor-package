{
    "version": 3,
    "file": "index.js",
    "sourceRoot": "",
    "sources": [
        "/src/store/index.ts"
    ],
    "names": [],
    "mappings": ";;;AAAA,mDAA6E;AAC7E,wBAAsB;AACtB,yCAA6E;AA8ErE,yBA9EA,0BAAc,CA8EA;AAAE,0BA9EA,2BAAe,CA8EA;AA7EvC,qCAAuC;AACvC,iCAAmC;AACnC,+BAAiC;AACjC,+BAAiC;AACjC,iCAAmC;AACnC,+BAAiC;AACjC,iCAAmC;AAEnC,uCAAqB,CACnB,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAC3D,CAAC;AAEF,IAAM,gBAAgB,GAAG;IACvB,sBAAY;IACZ,gBAAS;IACT,kBAAU;IACV,gBAAS;IACT,kBAAU;IACV,gBAAS;IACT,kBAAU;CACX,CAAC;AAEW,QAAA,aAAa,GAAG,uBAAK;KAC/B,KAAK,CAAC,eAAe,EAAE;IACtB,SAAS,EAAE,eAAe;IAC1B,MAAM,EAAE,uBAAK,CAAC,GAAG,CACf,uBAAK,CAAC,KAAK,OAAX,uBAAK,0BACH;YACE,KAAK,EAAE,KAAK;YACZ,UAAU,EAAE,UAAC,SAA0B;gBACrC,KAAyB,UAAgB,EAAhB,qCAAgB,EAAhB,8BAAgB,EAAhB,IAAgB,EAAE;oBAAtC,IAAI,YAAY,yBAAA;oBACnB,IAAI,YAAY,CAAC,IAAI,KAAK,SAAS,CAAC,SAAS,EAAE;wBAC7C,OAAO,YAAY,CAAC;qBACrB;iBACF;gBAED,OAAO,0BAAc,CAAC;YACxB,CAAC;SACF;QACD,0BAAc,GACX,gBAAgB,GAEtB;CACF,CAAC;KACD,KAAK,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC;IACd,IAAI,OAAO;QACT,OAAO,wBAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;IAC9B,CAAC;IAED,IAAI,MAAM;QACR,OAAO,wBAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IAC7B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,wBAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;IAC/B,CAAC;CACF,CAAC,EAZa,CAYb,CAAC;KACF,KAAK,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC;IACd,YAAY,EAAZ,UAAa,EAAU;QACrB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;CACF,CAAC,EAJa,CAIb,CAAC;KACF,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC;IAChB,QAAQ,EAAR,UAAS,KAAsB;QAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAY,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAoB,CAAC;SACrD;QACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAoB,CAAC;IACtD,CAAC;IAED,WAAW,EAAX,UAAY,KAAsB;QAChC,wBAAM,CAAC,KAAK,CAAC,CAAC;IAChB,CAAC;CACF,CAAC,EAZe,CAYf,CAAC,CAAC",
    "sourcesContent": [
        "import {types, getEnv, detach, setLivelynessChecking} from 'mobx-state-tree';\nimport 'setimmediate';\nimport {iRendererStore, IIRendererStore, SIRendererStore} from './iRenderer';\nimport {ServiceStore} from './service';\nimport {ComboStore} from './combo';\nimport {FormStore} from './form';\nimport {CRUDStore} from './crud';\nimport {TableStore} from './table';\nimport {ListStore} from './list';\nimport {ModalStore} from './modal';\n\nsetLivelynessChecking(\n  process.env.NODE_ENV === 'production' ? 'ignore' : 'error'\n);\n\nconst allowedStoreList = [\n  ServiceStore,\n  FormStore,\n  ComboStore,\n  CRUDStore,\n  TableStore,\n  ListStore,\n  ModalStore\n];\n\nexport const RendererStore = types\n  .model('RendererStore', {\n    storeType: 'RendererStore',\n    stores: types.map(\n      types.union(\n        {\n          eager: false,\n          dispatcher: (snapshort: SIRendererStore) => {\n            for (let storeFactory of allowedStoreList) {\n              if (storeFactory.name === snapshort.storeType) {\n                return storeFactory;\n              }\n            }\n\n            return iRendererStore;\n          }\n        },\n        iRendererStore,\n        ...allowedStoreList\n      )\n    )\n  })\n  .views(self => ({\n    get fetcher() {\n      return getEnv(self).fetcher;\n    },\n\n    get notify() {\n      return getEnv(self).notify;\n    },\n\n    get isCancel(): (value: any) => boolean {\n      return getEnv(self).isCancel;\n    }\n  }))\n  .views(self => ({\n    getStoreById(id: string) {\n      return self.stores.get(id);\n    }\n  }))\n  .actions(self => ({\n    addStore(store: SIRendererStore): IIRendererStore {\n      if (self.stores.has(store.id as string)) {\n        return self.stores.get(store.id) as IIRendererStore;\n      }\n      self.stores.put(store);\n      return self.stores.get(store.id) as IIRendererStore;\n    },\n\n    removeStore(store: IIRendererStore) {\n      detach(store);\n    }\n  }));\n\nexport type IRendererStore = typeof RendererStore.Type;\nexport {iRendererStore, IIRendererStore};\n"
    ]
}