import React from 'react';
import { FormControlProps } from './Item';
export interface DiffEditorProps extends FormControlProps {
    options?: object;
    language?: string;
    diffValue?: string;
}
export declare class DiffEditor extends React.Component<DiffEditorProps, any> {
    static defaultProps: Partial<DiffEditorProps>;
    state: {
        focused: boolean;
    };
    editor: any;
    monaco: any;
    originalEditor: any;
    modifiedEditor: any;
    toDispose: Array<Function>;
    constructor(props: DiffEditorProps);
    componentWillUnmount(): void;
    handleFocus(): void;
    handleBlur(): void;
    componentDidUpdate(prevProps: any): void;
    editorFactory(containerElement: any, monaco: any, options: any): any;
    handleEditorMounted(editor: any, monaco: any): void;
    handleModifiedEditorChange(): void;
    updateContainerSize(): void;
    render(): JSX.Element;
}
export declare class DiffEditorControlRenderer extends DiffEditor {
    static defaultProps: {
        [x: string]: any;
        options?: object | undefined;
        language?: string | undefined;
        diffValue?: string | undefined;
        render?: ((region: string, node: import("../../types").SchemaNode, props?: any) => JSX.Element) | undefined;
        env?: import("../../factory").RendererEnv | undefined;
        classPrefix?: string | undefined;
        classnames?: import("../../theme").ClassNamesFn | undefined;
        $path?: string | undefined;
        store?: (import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            parentId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }> & {
            readonly parentStore: any;
        } & {
            initData(data?: object): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            parentId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
        } & {
            initData(data?: object): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        data?: {
            [propName: string]: any;
        } | undefined;
        defaultData?: object | undefined;
        className?: string | undefined;
        onOpenDialog?: ((schema: import("../../types").Schema, data: any) => Promise<any>) | undefined;
        name?: string | undefined;
        formStore?: (import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            parentId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        } & {
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            error: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            fetching: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            saving: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            busying: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            checking: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            initializing: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            schema: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            schemaKey: import("mobx-state-tree").IType<string | undefined, string, string>;
        } & {
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submiting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            items: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            canAccessSuperData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            persistData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }> & {
            readonly parentStore: any;
        } & {
            initData(data?: object): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        } & {
            readonly loading: boolean;
        } & {
            markFetching: (fetching?: boolean) => void;
            markSaving: (saving?: boolean) => void;
            markBusying: (busying?: boolean) => void;
            fetchInitData: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            fetchData: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            reInitData: (data: object | undefined) => void;
            updateMessage: (msg?: string | undefined, error?: boolean) => void;
            clearMessage: () => void;
            saveRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            fetchSchema: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            checkRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
        } & {
            readonly loading: boolean;
            readonly errors: {
                [propName: string]: string[];
            };
            getValueByName(name: string): any;
            getPristineValueByName(name: string): any;
            getItemById(id: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemByName(name: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemsByName(name: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly valid: boolean;
            readonly isPristine: boolean;
        } & {
            setInited: (value: boolean) => void;
            setValues: (values: object, tag?: object | undefined) => void;
            setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
            trimValues: () => void;
            submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined) => Promise<any>;
            validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
            validateFields: (fields: string[]) => Promise<boolean>;
            clearErrors: () => void;
            saveRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
            registryItem: (name: string, options?: (Partial<import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }>>> & {
                value?: any;
            }) | undefined) => import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            unRegistryItem: (item: import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            beforeDetach: () => void;
            syncOptions: () => void;
            setCanAccessSuperData: (value?: boolean) => void;
            deleteValueByName: (name: string) => void;
            getPersistData: () => void;
            setPersistData: (() => void) & import("lodash").Cancelable;
            clearPersistData: () => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            parentId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        } & {
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            error: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            fetching: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            saving: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            busying: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            checking: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            initializing: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            schema: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            schemaKey: import("mobx-state-tree").IType<string | undefined, string, string>;
        } & {
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submiting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            items: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            canAccessSuperData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            persistData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            readonly parentStore: any;
        } & {
            initData(data?: object): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        } & {
            readonly loading: boolean;
        } & {
            markFetching: (fetching?: boolean) => void;
            markSaving: (saving?: boolean) => void;
            markBusying: (busying?: boolean) => void;
            fetchInitData: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            fetchData: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            reInitData: (data: object | undefined) => void;
            updateMessage: (msg?: string | undefined, error?: boolean) => void;
            clearMessage: () => void;
            saveRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            fetchSchema: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            checkRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
        } & {
            readonly loading: boolean;
            readonly errors: {
                [propName: string]: string[];
            };
            getValueByName(name: string): any;
            getPristineValueByName(name: string): any;
            getItemById(id: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemByName(name: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemsByName(name: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly valid: boolean;
            readonly isPristine: boolean;
        } & {
            setInited: (value: boolean) => void;
            setValues: (values: object, tag?: object | undefined) => void;
            setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
            trimValues: () => void;
            submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined) => Promise<any>;
            validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
            validateFields: (fields: string[]) => Promise<boolean>;
            clearErrors: () => void;
            saveRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
            registryItem: (name: string, options?: (Partial<import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }>>> & {
                value?: any;
            }) | undefined) => import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            unRegistryItem: (item: import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            beforeDetach: () => void;
            syncOptions: () => void;
            setCanAccessSuperData: (value?: boolean) => void;
            deleteValueByName: (name: string) => void;
            getPersistData: () => void;
            setPersistData: (() => void) & import("lodash").Cancelable;
            clearPersistData: () => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        formItem?: (import("mobx-state-tree").ModelInstanceTypeProps<{
            identifier: import("mobx-state-tree").ISimpleType<string>;
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
        }> & {
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions(value?: any): any;
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                required?: any;
                unique?: any;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[]) => void;
            loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            identifier: import("mobx-state-tree").ISimpleType<string>;
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions(value?: any): any;
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                required?: any;
                unique?: any;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[]) => void;
            loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        formInited?: boolean | undefined;
        formMode?: "normal" | "default" | "inline" | "row" | "horizontal" | undefined;
        formHorizontal?: import(".").FormHorizontal | undefined;
        defaultSize?: "xs" | "sm" | "md" | "lg" | "full" | undefined;
        size?: "xs" | "sm" | "md" | "lg" | "full" | undefined;
        disabled?: boolean | undefined;
        btnDisabled?: boolean | undefined;
        defaultValue?: any;
        value?: any;
        prinstine?: any;
        setPrinstineValue?: ((value: any) => void) | undefined;
        onChange?: ((value: any, submitOnChange?: boolean | undefined) => void) | undefined;
        onBulkChange?: ((values: {
            [propName: string]: any;
        }, submitOnChange?: boolean | undefined) => void) | undefined;
        addHook?: ((fn: Function, mode?: "validate" | "init" | undefined) => () => void) | undefined;
        removeHook?: ((fn: Function, mode?: "validate" | "init" | undefined) => void) | undefined;
        renderFormItems?: ((schema: import(".").FormSchema, region: string, props: any) => JSX.Element) | undefined;
        onFocus?: ((e: any) => void) | undefined;
        onBlur?: ((e: any) => void) | undefined;
        formItemValue?: any;
        getValue?: (() => any) | undefined;
        setValue?: ((value: any, key: string) => void) | undefined;
        inputClassName?: string | undefined;
        renderControl?: ((props: FormControlProps) => JSX.Element) | undefined;
        inputOnly?: boolean | undefined;
        renderLabel?: boolean | undefined;
        renderDescription?: boolean | undefined;
        sizeMutable?: boolean | undefined;
        wrap?: boolean | undefined;
        hint?: string | undefined;
        description?: string | undefined;
        descriptionClassName?: string | undefined;
        errors?: {
            [propName: string]: string;
        } | undefined;
        error?: string | undefined;
    };
}
export declare class DiffEditorRenderer extends DiffEditor {
    static defaultProps: {
        disabled: boolean;
        options?: object | undefined;
        language?: string | undefined;
        diffValue?: string | undefined;
        render?: ((region: string, node: import("../../types").SchemaNode, props?: any) => JSX.Element) | undefined;
        env?: import("../../factory").RendererEnv | undefined;
        classPrefix?: string | undefined;
        classnames?: import("../../theme").ClassNamesFn | undefined;
        $path?: string | undefined;
        store?: (import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            parentId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }> & {
            readonly parentStore: any;
        } & {
            initData(data?: object): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            parentId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
        } & {
            initData(data?: object): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        data?: {
            [propName: string]: any;
        } | undefined;
        defaultData?: object | undefined;
        className?: string | undefined;
        onOpenDialog?: ((schema: import("../../types").Schema, data: any) => Promise<any>) | undefined;
        name?: string | undefined;
        formStore?: (import("mobx-state-tree").ModelInstanceTypeProps<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            parentId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        } & {
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            error: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            fetching: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            saving: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            busying: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            checking: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            initializing: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            schema: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            schemaKey: import("mobx-state-tree").IType<string | undefined, string, string>;
        } & {
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submiting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            items: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            canAccessSuperData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            persistData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }> & {
            readonly parentStore: any;
        } & {
            initData(data?: object): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        } & {
            readonly loading: boolean;
        } & {
            markFetching: (fetching?: boolean) => void;
            markSaving: (saving?: boolean) => void;
            markBusying: (busying?: boolean) => void;
            fetchInitData: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            fetchData: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            reInitData: (data: object | undefined) => void;
            updateMessage: (msg?: string | undefined, error?: boolean) => void;
            clearMessage: () => void;
            saveRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            fetchSchema: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            checkRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
        } & {
            readonly loading: boolean;
            readonly errors: {
                [propName: string]: string[];
            };
            getValueByName(name: string): any;
            getPristineValueByName(name: string): any;
            getItemById(id: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemByName(name: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemsByName(name: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly valid: boolean;
            readonly isPristine: boolean;
        } & {
            setInited: (value: boolean) => void;
            setValues: (values: object, tag?: object | undefined) => void;
            setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
            trimValues: () => void;
            submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined) => Promise<any>;
            validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
            validateFields: (fields: string[]) => Promise<boolean>;
            clearErrors: () => void;
            saveRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
            registryItem: (name: string, options?: (Partial<import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }>>> & {
                value?: any;
            }) | undefined) => import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            unRegistryItem: (item: import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            beforeDetach: () => void;
            syncOptions: () => void;
            setCanAccessSuperData: (value?: boolean) => void;
            deleteValueByName: (name: string) => void;
            getPersistData: () => void;
            setPersistData: (() => void) & import("lodash").Cancelable;
            clearPersistData: () => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            parentId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        } & {
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            error: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            fetching: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            saving: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            busying: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            checking: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            initializing: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            schema: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            schemaKey: import("mobx-state-tree").IType<string | undefined, string, string>;
        } & {
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submiting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            items: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            canAccessSuperData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            persistData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            readonly parentStore: any;
        } & {
            initData(data?: object): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        } & {
            readonly loading: boolean;
        } & {
            markFetching: (fetching?: boolean) => void;
            markSaving: (saving?: boolean) => void;
            markBusying: (busying?: boolean) => void;
            fetchInitData: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            fetchData: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            reInitData: (data: object | undefined) => void;
            updateMessage: (msg?: string | undefined, error?: boolean) => void;
            clearMessage: () => void;
            saveRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            fetchSchema: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            checkRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
        } & {
            readonly loading: boolean;
            readonly errors: {
                [propName: string]: string[];
            };
            getValueByName(name: string): any;
            getPristineValueByName(name: string): any;
            getItemById(id: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemByName(name: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemsByName(name: string): (import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly valid: boolean;
            readonly isPristine: boolean;
        } & {
            setInited: (value: boolean) => void;
            setValues: (values: object, tag?: object | undefined) => void;
            setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
            trimValues: () => void;
            submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined) => Promise<any>;
            validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
            validateFields: (fields: string[]) => Promise<boolean>;
            clearErrors: () => void;
            saveRemote: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined) => Promise<any>;
            reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
            registryItem: (name: string, options?: (Partial<import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }>>> & {
                value?: any;
            }) | undefined) => import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            unRegistryItem: (item: import("mobx-state-tree").ModelInstanceTypeProps<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }> & {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                identifier: import("mobx-state-tree").ISimpleType<string>;
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                id: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
            }, {
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions(value?: any): any;
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                    required?: any;
                    unique?: any;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                }) => void;
                changeValue: (value: any, isPrintine?: boolean) => void;
                validate: (hook?: any) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | string[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[]) => void;
                loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                reset: () => void;
                openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            beforeDetach: () => void;
            syncOptions: () => void;
            setCanAccessSuperData: (value?: boolean) => void;
            deleteValueByName: (name: string) => void;
            getPersistData: () => void;
            setPersistData: (() => void) & import("lodash").Cancelable;
            clearPersistData: () => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        formItem?: (import("mobx-state-tree").ModelInstanceTypeProps<{
            identifier: import("mobx-state-tree").ISimpleType<string>;
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
        }> & {
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions(value?: any): any;
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                required?: any;
                unique?: any;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[]) => void;
            loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            identifier: import("mobx-state-tree").ISimpleType<string>;
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions(value?: any): any;
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
                required?: any;
                unique?: any;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[]) => void;
            loadOptions: (api: import("../../types").Api, data?: object | undefined, options?: import("../../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined) => Promise<import("../../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        formInited?: boolean | undefined;
        formMode?: "normal" | "default" | "inline" | "row" | "horizontal" | undefined;
        formHorizontal?: import(".").FormHorizontal | undefined;
        defaultSize?: "xs" | "sm" | "md" | "lg" | "full" | undefined;
        size?: "xs" | "sm" | "md" | "lg" | "full" | undefined;
        btnDisabled?: boolean | undefined;
        defaultValue?: any;
        value?: any;
        prinstine?: any;
        setPrinstineValue?: ((value: any) => void) | undefined;
        onChange?: ((value: any, submitOnChange?: boolean | undefined) => void) | undefined;
        onBulkChange?: ((values: {
            [propName: string]: any;
        }, submitOnChange?: boolean | undefined) => void) | undefined;
        addHook?: ((fn: Function, mode?: "validate" | "init" | undefined) => () => void) | undefined;
        removeHook?: ((fn: Function, mode?: "validate" | "init" | undefined) => void) | undefined;
        renderFormItems?: ((schema: import(".").FormSchema, region: string, props: any) => JSX.Element) | undefined;
        onFocus?: ((e: any) => void) | undefined;
        onBlur?: ((e: any) => void) | undefined;
        formItemValue?: any;
        getValue?: (() => any) | undefined;
        setValue?: ((value: any, key: string) => void) | undefined;
        inputClassName?: string | undefined;
        renderControl?: ((props: FormControlProps) => JSX.Element) | undefined;
        inputOnly?: boolean | undefined;
        renderLabel?: boolean | undefined;
        renderDescription?: boolean | undefined;
        sizeMutable?: boolean | undefined;
        wrap?: boolean | undefined;
        hint?: string | undefined;
        description?: string | undefined;
        descriptionClassName?: string | undefined;
        errors?: {
            [propName: string]: string;
        } | undefined;
        error?: string | undefined;
    };
}
