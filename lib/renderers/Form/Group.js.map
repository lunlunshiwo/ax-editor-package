{
    "version": 3,
    "file": "Group.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/Group.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,yCAAsD;AAEtD,6CAI4B;AAE5B,+BAAoC;AAcpC;IAA0C,gDAAgC;IACxE,8BAAY,KAAsB;QAAlC,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACjD,CAAC;IAED,4CAAa,GAAb,UAAc,OAAY,EAAE,KAAU,EAAE,UAAgB;QAC/C,IAAA,0BAAM,CAAe;QAE5B,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,IAAI,CAAC;SACb;QAED,IAAM,SAAS,GACb,OAAO,IAAK,OAAkB,CAAC,IAAI,KAAK,SAAS;YAC/C,CAAC,CAAC,OAAO;YACT,CAAC,CAAC;gBACE,IAAI,EAAE,SAAS;gBACf,OAAO,SAAA;aACR,CAAC;QAER,IAAI,SAAS,CAAC,OAAO,EAAE;YACrB,IAAI,SAAO,GAAG,SAAS,CAAC,OAAiB,CAAC;YAC1C,SAAO,CAAC,QAAQ,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAO,CAAC,QAAQ,CAAC,CAAC;YAC5D,SAAO,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,SAAO,CAAC,SAAS,CAAC,CAAC;SAChE;QAED,OAAO,MAAM,CAAC,KAAG,KAAO,EAAE,SAAS,uBAC9B,UAAU,EACb,CAAC;IACL,CAAC;IAED,6CAAc,GAAd,UAAe,KAAkB;QAAjC,iBA2BC;QA3Bc,sBAAA,EAAA,QAAQ,IAAI,CAAC,KAAK;QAC1B,IAAA,yBAAQ,EAAE,2BAAS,EAAE,qBAAc,EAAE,iBAAI,EAAE,yBAAQ,EAAE,iBAAI,CAAU;QAExE,QAAQ,GAAG,IAAI,IAAI,QAAQ,CAAC;QAC5B,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,kBAAS,CAAC,IAAI,EAAE,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC;QAE1D,OAAO,CACL,uCACE,SAAS,EAAE,EAAE,CACX,4CAA0C,QAAU,EACpD,SAAS,CACV,IAEA,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAO,EAAE,KAAK;YAC3B,IAAI,CAAC,kBAAS,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;gBAC7B,OAAO,IAAI,CAAC;aACb;YAED,IAAM,WAAW,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC;YAE1D,OAAO,KAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE;gBACxC,GAAG,EAAE,KAAK;gBACV,QAAQ,EAAE,WAAW;aACtB,CAAC,CAAC;QACL,CAAC,CAAC,CACE,CACP,CAAC;IACJ,CAAC;IAED,+CAAgB,GAAhB,UAAiB,KAAkB;QAAnC,iBAoEC;QApEgB,sBAAA,EAAA,QAAQ,IAAI,CAAC,KAAK;QAE/B,IAAA,yBAAQ,EACR,2BAAS,EACT,sBAAe,EACf,qBAAc,EACd,iBAAI,EACJ,6BAAU,EACV,yBAAQ,EACR,qCAAc,EACd,iBAAI,EACJ,eAAG,CACK;QAEV,QAAQ,GAAG,IAAI,IAAI,QAAQ,CAAC;QAE5B,OAAO,CACL,uCACE,SAAS,EAAE,EAAE,CACX,4CAA0C,QAAU,EACpD,GAAG,CAAC,CAAC,CAAC,iBAAe,GAAK,CAAC,CAAC,CAAC,EAAE,EAC/B,SAAS,CACV,IAEA,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAO,EAAE,KAAK;YAC3B,IAAI,CAAC,kBAAS,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;gBAC7B,OAAO,IAAI,CAAC;aACb;YACD,IAAM,WAAW,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC;YAE1D,IACE,WAAW,KAAK,QAAQ;gBACxB,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,EACvC;gBACA,OAAO,KAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE;oBACxC,QAAQ,EAAE,QAAQ;oBAClB,GAAG,EAAE,KAAK;oBACV,SAAS,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,eAAe,CAAC;iBAC1D,CAAC,CAAC;aACJ;YAED,IAAM,WAAW,GACf,OAAO,CAAC,WAAW;gBACnB,qBAAY,CAAC,OAAO,IAAI,OAAO,CAAC,eAAe,CAAC,CAAC;YACnD,IAAI,gBAAgB,GAClB,UAAU;gBACV,6BAAoB,CAClB,cAAc,EACd,QAAQ,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAtB,CAAsB,CAAC,CAAC,MAAM,CACvD,CAAC;YAEJ,OAAO,CACL,uCACE,GAAG,EAAE,KAAK,EACV,SAAS,EAAE,EAAE,CACR,EAAE,qBAAkB,EACvB,WAAW,CAAC,CAAC,CAAI,EAAE,0BAAqB,WAAa,CAAC,CAAC,CAAC,EAAE,CAC3D,IAEA,KAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE;gBAClC,cAAc,EAAE,gBAAgB;gBAChC,QAAQ,EAAE,WAAW;aACtB,CAAC,CACE,CACP,CAAC;QACJ,CAAC,CAAC,CACE,CACP,CAAC;IACJ,CAAC;IAED,0CAAW,GAAX,UAAY,KAAkB;QAAlB,sBAAA,EAAA,QAAQ,IAAI,CAAC,KAAK;QAC5B,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QAClC,OAAO,SAAS,KAAK,UAAU;YAC7B,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAC5B,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,qCAAM,GAAN;QACE,IAAM,eAA6B,EAA5B,gBAAK,EAAE,oCAAqB,CAAC;QAEpC,IAAI,KAAK,EAAE;YACT,OAAO,CACL,8BAAC,mBAAY,uBACP,IAAW,IACf,WAAW,EAAE,KAAK,EAClB,KAAK,EAAE,KAAK,EACZ,aAAa,EAAE,IAAI,CAAC,WAAW,IAC/B,CACH,CAAC;SACH;QAED,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC;IAzJU,oBAAoB;QALhC,kBAAQ,CAAC;YACR,IAAI,EAAE,gDAAgD;YACtD,WAAW,EAAE,KAAK;YAClB,IAAI,EAAE,eAAe;SACtB,CAAC;;OACW,oBAAoB,CA0JhC;IAAD,2BAAC;CAAA,AA1JD,CAA0C,eAAK,CAAC,SAAS,GA0JxD;AA1JY,oDAAoB",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../../factory';\nimport {Schema} from '../../types';\nimport {\n  isVisible,\n  getWidthRate,\n  makeHorizontalDeeper\n} from '../../utils/helper';\nimport cx from 'classnames';\nimport {FormItemWrap} from './Item';\n\nexport interface InputGroupProps extends RendererProps {\n  formMode?: string;\n  controls: Array<any>;\n  gap?: 'xs' | 'sm' | 'normal';\n  direction: 'horizontal' | 'vertical';\n}\n\n@Renderer({\n  test: /(^|\\/)form(?:\\/.+)?\\/control\\/(?:\\d+\\/)?group$/,\n  sizeMutable: false,\n  name: 'group-control'\n})\nexport class ControlGroupRenderer extends React.Component<InputGroupProps> {\n  constructor(props: InputGroupProps) {\n    super(props);\n    this.renderInput = this.renderInput.bind(this);\n  }\n\n  renderControl(control: any, index: any, otherProps?: any) {\n    const {render} = this.props;\n\n    if (!control) {\n      return null;\n    }\n\n    const subSchema: any =\n      control && (control as Schema).type === 'control'\n        ? control\n        : {\n            type: 'control',\n            control\n          };\n\n    if (subSchema.control) {\n      let control = subSchema.control as Schema;\n      control.hiddenOn && (subSchema.hiddenOn = control.hiddenOn);\n      control.visibleOn && (subSchema.visibleOn = control.visibleOn);\n    }\n\n    return render(`${index}`, subSchema, {\n      ...otherProps\n    });\n  }\n\n  renderVertical(props = this.props) {\n    let {controls, className, classnames: cx, mode, formMode, data} = props;\n\n    formMode = mode || formMode;\n    controls = controls.filter(item => isVisible(item, data));\n\n    return (\n      <div\n        className={cx(\n          `Form-group Form-group--ver Form-group--${formMode}`,\n          className\n        )}\n      >\n        {controls.map((control, index) => {\n          if (!isVisible(control, data)) {\n            return null;\n          }\n\n          const controlMode = (control && control.mode) || formMode;\n\n          return this.renderControl(control, index, {\n            key: index,\n            formMode: controlMode\n          });\n        })}\n      </div>\n    );\n  }\n\n  renderHorizontal(props = this.props) {\n    let {\n      controls,\n      className,\n      classPrefix: ns,\n      classnames: cx,\n      mode,\n      horizontal,\n      formMode,\n      formHorizontal,\n      data,\n      gap\n    } = props;\n\n    formMode = mode || formMode;\n\n    return (\n      <div\n        className={cx(\n          `Form-group Form-group--hor Form-group--${formMode}`,\n          gap ? `Form-group--${gap}` : '',\n          className\n        )}\n      >\n        {controls.map((control, index) => {\n          if (!isVisible(control, data)) {\n            return null;\n          }\n          const controlMode = (control && control.mode) || formMode;\n\n          if (\n            controlMode === 'inline' ||\n            (control && control.type === 'formula')\n          ) {\n            return this.renderControl(control, index, {\n              formMode: 'inline',\n              key: index,\n              className: cx(control.className, control.columnClassName)\n            });\n          }\n\n          const columnWidth =\n            control.columnRatio ||\n            getWidthRate(control && control.columnClassName);\n          let horizontalDeeper =\n            horizontal ||\n            makeHorizontalDeeper(\n              formHorizontal,\n              controls.filter(item => item.mode !== 'inline').length\n            );\n\n          return (\n            <div\n              key={index}\n              className={cx(\n                `${ns}Form-groupColumn`,\n                columnWidth ? `${ns}Form-groupColumn--${columnWidth}` : ''\n              )}\n            >\n              {this.renderControl(control, index, {\n                formHorizontal: horizontalDeeper,\n                formMode: controlMode\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  renderInput(props = this.props) {\n    const direction = props.direction;\n    return direction === 'vertical'\n      ? this.renderVertical(props)\n      : this.renderHorizontal(props);\n  }\n\n  render() {\n    const {label, ...rest} = this.props;\n\n    if (label) {\n      return (\n        <FormItemWrap\n          {...rest as any}\n          sizeMutable={false}\n          label={label}\n          renderControl={this.renderInput}\n        />\n      );\n    }\n\n    return this.renderInput();\n  }\n}\n"
    ]
}