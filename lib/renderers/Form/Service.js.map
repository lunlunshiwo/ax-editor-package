{
    "version": 3,
    "file": "Service.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/Service.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAE1B,yCAAsD;AACtD,+DAAsC;AAEtC,uCAAmE;AAEnE,+CAAgE;AAShE;IAAqC,2CAAY;IAAjD;;IAuDA,CAAC;IApDC,4CAAkB,GAAlB;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,OAAyB,CAAC;QAC9C,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,8CAAoB,GAApB;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,OAAyB,CAAC;QAC9C,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,oCAAU,GAAV;QACQ,IAAA,eAWQ,EAVZ,kBAAM,EACN,gBAAK,EACL,gBAAY,EACZ,sBAAQ,EACR,cAAI,EACJ,sBAAQ,EACR,oCAAe,EACf,sBAAQ,EACR,gBAAK,EACL,kBACY,CAAC;QAEf,IAAM,YAAY,GAAG,KAAK,CAAC,MAAM;YAC/B,MAAM,IAAI;YACR,QAAQ,UAAA;YACR,IAAI,MAAA;YACJ,QAAQ,UAAA;SACT,CAAC;QACJ,IACE,YAAY;YACZ,CAAC,YAAY,CAAC,IAAI;YAClB,CAAC,YAAY,CAAC,QAAQ,IAAI,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,QAAQ,CAAC;YACrE,eAAe,EACf;YACA,OAAO,CACL,uCACE,GAAG,EAAE,KAAK,CAAC,SAAS,IAAI,OAAO,EAC/B,SAAS,EAAE,EAAE,CAAC,YAAS,QAAQ,IAAI,QAAQ,CAAE,CAAC,IAE7C,eAAe,CAAC,YAAY,EAAE,UAAU,EAAE;gBACzC,KAAK,OAAA;gBACL,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,MAAM,QAAA;aACP,CAAC,CACE,CACP,CAAC;SACH;QAED,OAAO,iBAAM,UAAU,WAAE,CAAC;IAC5B,CAAC;IArDM,2BAAW,GAAG,sBAAa,CAAC;IADxB,eAAe;QAP3B,kBAAQ,CAAC;YACR,IAAI,EAAE,4BAA4B;YAClC,MAAM,EAAE,CAAC,GAAG;YACZ,SAAS,EAAE,sBAAY,CAAC,IAAI;YAC5B,gBAAgB,EAAE,KAAK;YACvB,IAAI,EAAE,iBAAiB;SACxB,CAAC;OACW,eAAe,CAuD3B;IAAD,sBAAC;CAAA,AAvDD,CAAqC,iBAAY,GAuDhD;AAvDY,0CAAe",
    "sourcesContent": [
        "import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Renderer, RendererProps} from '../../factory';\nimport BasicService from '../Service';\nimport {Schema} from '../../types';\nimport Scoped, {ScopedContext, IScopedContext} from '../../Scoped';\nimport {observer} from 'mobx-react';\nimport {ServiceStore, IServiceStore} from '../../store/service';\n\n@Renderer({\n  test: /(^|\\/)form\\/(.*)\\/service$/,\n  weight: -100,\n  storeType: ServiceStore.name,\n  storeExtendsData: false,\n  name: 'service-control'\n})\nexport class ServiceRenderer extends BasicService {\n  static contextType = ScopedContext;\n\n  componentWillMount() {\n    const scoped = this.context as IScopedContext;\n    scoped.registerComponent(this);\n  }\n\n  componentWillUnmount() {\n    const scoped = this.context as IScopedContext;\n    scoped.unRegisterComponent(this);\n  }\n\n  renderBody(): JSX.Element {\n    const {\n      render,\n      store,\n      body: schema,\n      controls,\n      tabs,\n      feildSet,\n      renderFormItems,\n      formMode,\n      $path,\n      classnames: cx\n    } = this.props;\n\n    const finnalSchema = store.schema ||\n      schema || {\n        controls,\n        tabs,\n        feildSet\n      };\n    if (\n      finnalSchema &&\n      !finnalSchema.type &&\n      (finnalSchema.controls || finnalSchema.tabs || finnalSchema.feildSet) &&\n      renderFormItems\n    ) {\n      return (\n        <div\n          key={store.schemaKey || 'forms'}\n          className={cx(`Form--${formMode || 'normal'}`)}\n        >\n          {renderFormItems(finnalSchema, 'controls', {\n            store,\n            data: store.data,\n            render\n          })}\n        </div>\n      );\n    }\n\n    return super.renderBody();\n  }\n}\n"
    ]
}