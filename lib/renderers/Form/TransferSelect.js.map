{
    "version": 3,
    "file": "TransferSelect.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/TransferSelect.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,qCAAsE;AACtE,iCAAmC;AACnC,+EAAiD;AACjD,gDAAuD;AACvD,+CAAyC;AAmBzC;IAAoC,0CAGnC;IAcC,wBAAY,KAA0B;QAAtC,YACE,kBAAM,KAAK,CAAC,SAQb;QAPC,KAAI,CAAC,KAAK,GAAG;YACX,eAAe,EAAE,EAAE;YACnB,OAAO,EAAE,EAAE;SACZ,CAAC;QACF,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QACrD,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAC/C,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACnD,CAAC;IAED,0CAAiB,GAAjB;QACS,IAAA,4BAAO,CAAe;QAE7B,IAAI,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACrC,IAAI,CAAC,QAAQ,CAAC;gBACZ,eAAe,EAAE,OAAO;aACzB,CAAC,CAAC;SACJ;IACH,CAAC;IAED,2CAAkB,GAAlB,UAAmB,SAA8B;QACxC,IAAA,4BAAO,CAAe;QAE7B,IAAI,OAAO,IAAI,SAAS,CAAC,OAAO,KAAK,OAAO,EAAE;YAC5C,IAAI,CAAC,QAAQ,CAAC;gBACZ,eAAe,EAAE,OAAO;gBACxB,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC;SACJ;IACH,CAAC;IAED,oCAAW,GAAX,UAAY,WAAyB;QAC7B,IAAA,eAOQ,EANZ,oCAAe,EACf,sBAAQ,EACR,0BAAU,EACV,8BAAY,EACZ,wBAAS,EACT,0BACY,CAAC;QAEf,IAAI,QAAQ,GACV,eAAe,CAAC,MAAM,KAAK,CAAC;YAC1B,CAAC,CAAC,CAAC,WAAW,CAAC;YACf,CAAC,CAAC,cAAK,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,WAAW,CAAC,EAAE,UAAU,IAAI,OAAO,CAAC,CAAC;QAE5E,IAAI,UAAU,EAAE;YACd,QAAQ,GAAG,QAAQ;iBAChB,GAAG,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,UAAU,IAAI,OAAO,CAAC,EAA3B,CAA2B,CAAC;iBAC/C,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,CAAC;SAC3B;aAAM,IAAI,YAAY,EAAE;YACvB,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,UAAU,IAAI,OAAO,CAAC,EAA3B,CAA2B,CAAC,CAAC;SACrE;QAED,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACrB,CAAC;IAED,uCAAc,GAAd;QACS,IAAA,4CAAe,CAAe;QAE/B,IAAA,eAOQ,EANZ,oCAAe,EACf,sBAAQ,EACR,0BAAU,EACV,8BAAY,EACZ,wBAAS,EACT,0BACY,CAAC;QAEf,IAAI,QAAQ,CAAC;QAEb,IAAI,eAAe,CAAC,MAAM,KAAK,eAAe,CAAC,MAAM,EAAE;YACrD,QAAQ,GAAG,EAAE,CAAC;SACf;aAAM;YACL,QAAQ,GAAG,UAAU;gBACnB,CAAC,CAAC,eAAe;qBACZ,GAAG,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,UAAU,IAAI,OAAO,CAAC,EAA3B,CAA2B,CAAC;qBAC/C,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;gBAC1B,CAAC,CAAC,YAAY;oBACd,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,UAAU,IAAI,OAAO,CAAC,EAA3B,CAA2B,CAAC;oBACjE,CAAC,CAAC,eAAe,CAAC;SACrB;QAED,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACrB,CAAC;IAED,oCAAW,GAAX;QACE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,qCAAY,GAAZ,UAAa,CAAsC;QAC3C,IAAA,eAA6C,EAA5C,sBAAQ,EAAE,4BAAW,EAAE,oBAAqB,CAAC;QAEpD,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAM,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QAE7C,IAAI,OAAO,KAAK,EAAE,EAAE;YAClB,UAAU,GAAG,OAAO,CAAC;SACtB;aAAM;YACL,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,MAAc;gBACzC,OAAO,CACJ,MAAM,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAY;qBAC7D,WAAW,EAAE;qBACb,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CACzB,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;QACD,IAAI,CAAC,QAAQ,CAAC;YACZ,eAAe,EAAE,UAAU;YAC3B,OAAO,SAAA;SACR,CAAC,CAAC;IACL,CAAC;IAED,+BAAM,GAAN;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;QACxC,MAAM,IAAI,MAAM,EAAE,CAAC;IACrB,CAAC;IAED,oCAAW,GAAX;QAAA,iBAyFC;QAxFQ,IAAA,4CAAe,CAAe;QAE/B,IAAA,eASQ,EARZ,kBAAc,EACd,mBAAe,EACf,oCAAe,EACf,oBAAO,EACP,sBAAQ,EACR,0BAAU,EACV,wCAAiB,EACjB,0BACY,CAAC;QAEf,OAAO,CACL,uCACE,SAAS,EAAE,EAAE,CACX,2BAA2B,EAC3B,kCAAkC,CACnC;YAED,uCAAK,SAAS,EAAE,EAAE,CAAC,wBAAwB,CAAC;gBAC1C,4CAAU,QAAQ,cAAI,eAAe,CAAC,MAAM,SAC1C,eAAe,CAAC,MAAM,WACrB,CAAQ;gBACV,UAAU,CAAC,CAAC,CAAC,CACZ,uCAAK,SAAS,EAAE,EAAE,CAAC,8BAA8B,CAAC;oBAChD,uCAAK,SAAS,EAAE,EAAE,CAAC,mBAAmB,CAAC;wBACrC,yCACE,WAAW,EAAE,iBAAiB,EAC9B,YAAY,EAAC,KAAK,EAClB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EACzB,QAAQ,EAAE,IAAI,CAAC,YAAY,GAC3B;wBACF,qCAAG,SAAS,EAAC,cAAc,GAAG,CAC1B,CACF,CACP,CAAC,CAAC,CAAC,IAAI,CACJ;YACN,uCAAK,SAAS,EAAE,EAAE,CAAC,qBAAqB,CAAC;gBACvC,yCAAO,SAAS,EAAE,EAAE,CAAC,aAAa,CAAC;oBACjC;wBACE;4BACE,sCAAI,SAAS,EAAE,EAAE,CAAC,iBAAiB,CAAC;gCAClC,8BAAC,kBAAQ,IACP,WAAW,EAAE,EAAE,EACf,OAAO,EAAE,eAAe,CAAC,MAAM,KAAK,eAAe,CAAC,MAAM,EAC1D,OAAO,EAAE,eAAe,CAAC,MAAM,GAAG,CAAC,EACnC,QAAQ,EAAE,IAAI,CAAC,cAAc,GAC7B,CACC;4BACJ,OAAO,CAAC,GAAG,CAAC,UAAC,MAAW,EAAE,WAAmB,IAAK,OAAA,CACjD,sCAAI,GAAG,EAAE,WAAW,IAAG,MAAM,CAAC,KAAK,CAAM,CAC1C,EAFkD,CAElD,CAAC,CACC,CACC;oBACR,6CACG,eAAe,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,WAAW;;wBAAK,OAAA,CAC5C,sCACE,SAAS,EAAE,EAAE;gCACX,GAAI,EAAE,kBAAe,IAAG,WAAW,GAAG,CAAC,KAAK,CAAC;gCAC7C,GAAI,EAAE,mBAAgB,IAAG,WAAW,GAAG,CAAC,KAAK,CAAC;oCAC9C,EACF,GAAG,EAAE,WAAW;4BAEhB;gCACE,8BAAC,kBAAQ,IACP,WAAW,EAAE,EAAE,EACf,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,aAAI,CAAC,eAAe,EAAE,UAAC,cAAmB;wCACjD,OAAO,CACL,cAAc,CAAC,UAAU,IAAI,OAAO,CAAC;4CACrC,MAAM,CAAC,UAAU,IAAI,OAAO,CAAC,CAC9B,CAAC;oCACJ,CAAC,CAAC,EACF,QAAQ,EAAE,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,GAC7C,CACC;4BACJ,OAAO,CAAC,GAAG,CAAC,UAAC,MAAW,EAAE,WAAmB;gCAC5C,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;gCACpC,OAAO,sCAAI,GAAG,EAAE,WAAW,IAAG,IAAI,CAAM,CAAC;4BAC3C,CAAC,CAAC,CACC,CACN;oBA1B6C,CA0B7C,CAAC,CACI,CACF,CACJ,CACF,CACP,CAAC;IACJ,CAAC;IAED,qCAAY,GAAZ;QAAA,iBA0EC;QAzEQ,IAAA,4CAAe,CAAe;QAE/B,IAAA,eASQ,EARZ,kBAAc,EACd,mBAAe,EACf,oCAAe,EACf,sBAAQ,EACR,0BAAU,EACV,wCAAiB,EACjB,0BAAU,EACV,0BACY,CAAC;QAEf,OAAO,CACL,uCACE,SAAS,EAAE,EAAE,CACX,2BAA2B,EAC3B,mCAAmC,CACpC;YAED,uCAAK,SAAS,EAAE,EAAE,CAAC,wBAAwB,CAAC;gBAC1C,4CAAU,QAAQ,cAAI,eAAe,CAAC,MAAM,SAC1C,eAAe,CAAC,MAAM,WACrB,CAAQ;gBACV,eAAe,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CACjD,wCACE,OAAO,EAAE,IAAI,CAAC,cAAc,EAC5B,SAAS,EAAE,EAAE,CAAC,0BAA0B,CAAC,+BAGpC,CACR,CAAC,CAAC,CAAC,IAAI,CACJ;YACN,uCAAK,SAAS,EAAE,EAAE,CAAC,qBAAqB,CAAC;gBACtC,UAAU,CAAC,CAAC,CAAC,CACZ,uCAAK,SAAS,EAAE,EAAE,CAAC,8BAA8B,CAAC;oBAChD,uCAAK,SAAS,EAAE,EAAE,CAAC,mBAAmB,CAAC;wBACrC,yCACE,WAAW,EAAE,iBAAiB,EAC9B,YAAY,EAAC,KAAK,EAClB,QAAQ,EAAE,IAAI,CAAC,YAAY,GAC3B;wBACF,qCAAG,SAAS,EAAC,cAAc,GAAG,CAC1B,CACF,CACP,CAAC,CAAC,CAAC,IAAI;gBACR,0CACG,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAC5B,eAAe,CAAC,GAAG,CAAC,UAAC,MAAW,EAAE,WAAmB,IAAK,OAAA,CACxD,sCAAI,GAAG,EAAE,WAAW;oBAClB,8BAAC,kBAAQ,IACP,WAAW,EAAE,EAAE,EACf,OAAO,EACL,CAAC,CAAC,aAAI,CAAC,eAAe,EAAE,UAAC,cAAmB;4BAC1C,OAAO,CACL,cAAc,CAAC,UAAU,IAAI,OAAO,CAAC;gCACrC,MAAM,CAAC,UAAU,IAAI,OAAO,CAAC,CAC9B,CAAC;wBACJ,CAAC,CAAC,EAEJ,QAAQ,EAAE,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,IAE5C,MAAM,CAAC,UAAU,IAAI,OAAO,CAAC,CACrB,CACR,CACN,EAjByD,CAiBzD,CAAC,CACH,CAAC,CAAC,CAAC,CACF,qEAAa,CACd,CACE,CACD,CACF,CACP,CAAC;IACJ,CAAC;IAED,qCAAY,GAAZ;QACS,IAAA,0BAAc,CAAe;QAEpC,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,uBAAuB,CAAC;YACzC,wCAAM,SAAS,EAAE,EAAE,CAAC,2BAA2B,CAAC,GAAI,CAChD,CACP,CAAC;IACJ,CAAC;IAED,mDAA0B,GAA1B;QAAA,iBAuDC;QAtDO,IAAA,eAMQ,EALZ,kBAAc,EACd,oCAAe,EACf,gCAAa,EACb,0BAAU,EACV,oBACY,CAAC;QAEf,OAAO,CACL,uCACE,SAAS,EAAE,EAAE,CACX,gCAAgC,EAChC,uCAAuC,CACxC;YAED,uCAAK,SAAS,EAAE,EAAE,CAAC,wBAAwB,CAAC;gBAC1C,4CAAU,aAAa,cAAI,eAAe,CAAC,MAAM,WAAG,CAAQ;gBAC3D,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAC5B,wCACE,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,SAAS,EAAE,EAAE,CAAC,yBAAyB,CAAC,+BAGnC,CACR,CAAC,CAAC,CAAC,IAAI,CACJ;YACN,uCAAK,SAAS,EAAE,EAAE,CAAC,qBAAqB,CAAC;gBACvC,yCAAO,SAAS,EAAE,EAAE,CAAC,aAAa,CAAC;oBACjC;wBACE;4BACE,0CACG,aAAI,CAAC,OAAO,EAAE,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,EAA1B,CAA0B,CAAC,CAAC,KAAK,CACvD,CACF,CACC;oBACR,6CACG,eAAe,CAAC,GAAG,CAAC,UAAC,MAAc,EAAE,WAAmB,IAAK,OAAA,CAC5D,sCAAI,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,WAAW;wBAClD;4BACG,MAAM,CAAC,UAAU,IAAI,OAAO,CAAC;4BAC9B,qCACE,OAAO,EAAE,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,EAC5C,SAAS,EAAE,EAAE,CAAC,6BAA6B,CAAC;gCAE5C,8BAAC,YAAI,IAAC,IAAI,EAAC,OAAO,EAAC,SAAS,EAAC,MAAM,GAAG,CACpC,CACD,CACF,CACN,EAZ6D,CAY7D,CAAC,CACI,CACF,CACJ,CACF,CACP,CAAC;IACJ,CAAC;IAED,oDAA2B,GAA3B;QAAA,iBA2CC;QA1CO,IAAA,eAKQ,EAJZ,kBAAc,EACd,oCAAe,EACf,gCAAa,EACb,0BACY,CAAC;QAEf,OAAO,CACL,uCACE,SAAS,EAAE,EAAE,CACX,gCAAgC,EAChC,wCAAwC,CACzC;YAED,uCAAK,SAAS,EAAE,EAAE,CAAC,wBAAwB,CAAC;gBAC1C,4CAAU,aAAa,cAAI,eAAe,CAAC,MAAM,WAAG,CAAQ;gBAC3D,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAC5B,wCACE,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,SAAS,EAAE,EAAE,CAAC,yBAAyB,CAAC,+BAGnC,CACR,CAAC,CAAC,CAAC,IAAI,CACJ;YACN,uCAAK,SAAS,EAAE,EAAE,CAAC,qBAAqB,CAAC;gBACvC,0CACG,eAAe,CAAC,GAAG,CAAC,UAAC,MAAW,EAAE,WAAmB,IAAK,OAAA,CACzD,sCAAI,GAAG,EAAE,WAAW;oBACjB,MAAM,CAAC,UAAU,IAAI,OAAO,CAAC;oBAC9B,qCACE,OAAO,EAAE,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,EAC5C,SAAS,EAAE,EAAE,CAAC,6BAA6B,CAAC,IAE3C,iBAAS,CACR,CACD,CACN,EAV0D,CAU1D,CAAC,CACC,CACD,CACF,CACP,CAAC;IACJ,CAAC;IAED,+BAAM,GAAN;QACQ,IAAA,eAAmE,EAAlE,wBAAS,EAAE,kBAAc,EAAE,kBAAM,EAAE,sBAAQ,EAAE,oBAAqB,CAAC;QAC1E,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,uBAAuB,EAAE,SAAS,CAAC;YACnD,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YAE/D,IAAI,CAAC,YAAY,EAAE;YAEnB,QAAQ,KAAK,OAAO;gBACnB,CAAC,CAAC,IAAI,CAAC,0BAA0B,EAAE;gBACnC,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE;YAEtC,8BAAC,oBAAO,IAAC,IAAI,EAAC,IAAI,EAAC,OAAO,QAAC,GAAG,EAAC,MAAM,EAAC,IAAI,EAAE,OAAO,GAAI,CACnD,CACP,CAAC;IACJ,CAAC;IA1aM,2BAAY,GAAG;QACpB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,IAAI;QACd,UAAU,EAAE,OAAO;QACnB,UAAU,EAAE,OAAO;QACnB,WAAW,EAAE,OAAO;QACpB,iBAAiB,EAAE,QAAQ;QAC3B,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,IAAI;QACnB,OAAO,EAAE,EAAE;QACX,UAAU,EAAE,IAAI;KACjB,CAAC;IAgaJ,qBAAC;CAAA,AA/aD,CAAoC,eAAK,CAAC,SAAS,GA+alD;AA/aY,wCAAc;AAob3B;IAAmD,yDAAc;IAAjE;;IAAmE,CAAC;IAAvD,6BAA6B;QAHzC,wBAAc,CAAC;YACd,IAAI,EAAE,iBAAiB;SACxB,CAAC;OACW,6BAA6B,CAA0B;IAAD,oCAAC;CAAA,AAApE,CAAmD,cAAc,GAAG;AAAvD,sEAA6B",
    "sourcesContent": [
        "import React from 'react';\nimport {OptionsControl, OptionsControlProps, Option} from './Options';\nimport {xorBy, find} from 'lodash';\nimport Checkbox from '../../components/Checkbox';\nimport {closeIcon, Icon} from '../../components/icons';\nimport {Spinner} from '../../components';\n\nexport interface TransferSelectProps extends OptionsControlProps {\n  viewMode?: 'table' | 'normal';\n  labelField: string;\n  valueField: string;\n  searchField: string;\n  searchPlaceholder: string;\n  columns: Array<any>;\n  allTitle: string;\n  selectedTitle: string;\n  searchable: boolean;\n}\n\nexport interface TransferSelectState {\n  filteredOptions: Array<Option>;\n  keyword: string;\n}\n\nexport class TransferSelect extends React.Component<\n  TransferSelectProps,\n  TransferSelectState\n> {\n  static defaultProps = {\n    viewMode: 'normal',\n    multiple: true,\n    labelField: 'label',\n    valueField: 'value',\n    searchField: 'label',\n    searchPlaceholder: '请输入关键字',\n    allTitle: '全部',\n    selectedTitle: '已选',\n    columns: [],\n    searchable: true\n  };\n\n  constructor(props: TransferSelectProps) {\n    super(props);\n    this.state = {\n      filteredOptions: [],\n      keyword: ''\n    };\n    this.handleCheckAll = this.handleCheckAll.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  componentDidMount() {\n    const {options} = this.props;\n\n    if (options && Array.isArray(options)) {\n      this.setState({\n        filteredOptions: options\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: TransferSelectProps) {\n    const {options} = this.props;\n\n    if (options && prevProps.options !== options) {\n      this.setState({\n        filteredOptions: options,\n        keyword: ''\n      });\n    }\n  }\n\n  handleCheck(checkedItem: Option | any) {\n    const {\n      selectedOptions,\n      onChange,\n      joinValues,\n      extractValue,\n      delimiter,\n      valueField\n    } = this.props;\n\n    let newValue: any =\n      selectedOptions.length === 0\n        ? [checkedItem]\n        : xorBy(selectedOptions.concat(), [checkedItem], valueField || 'value');\n\n    if (joinValues) {\n      newValue = newValue\n        .map((item: any) => item[valueField || 'value'])\n        .join(delimiter || ',');\n    } else if (extractValue) {\n      newValue = newValue.map((item: any) => item[valueField || 'value']);\n    }\n\n    onChange(newValue);\n  }\n\n  handleCheckAll() {\n    const {filteredOptions} = this.state;\n\n    const {\n      selectedOptions,\n      onChange,\n      joinValues,\n      extractValue,\n      delimiter,\n      valueField\n    } = this.props;\n\n    let newValue;\n\n    if (selectedOptions.length === filteredOptions.length) {\n      newValue = '';\n    } else {\n      newValue = joinValues\n        ? filteredOptions\n            .map((item: any) => item[valueField || 'value'])\n            .join(delimiter || '')\n        : extractValue\n        ? filteredOptions.map((item: any) => item[valueField || 'value'])\n        : filteredOptions;\n    }\n\n    onChange(newValue);\n  }\n\n  handleClear() {\n    this.props.onChange('');\n  }\n\n  handleSearch(e: React.ChangeEvent<HTMLInputElement>) {\n    const {viewMode, searchField, options} = this.props;\n\n    let newOptions = [];\n    const keyword = e.target.value.toLowerCase();\n\n    if (keyword === '') {\n      newOptions = options;\n    } else {\n      newOptions = options.filter((option: Option) => {\n        return (\n          (option[viewMode === 'table' ? searchField : 'label'] as string)\n            .toLowerCase()\n            .indexOf(keyword) > -1\n        );\n      });\n    }\n    this.setState({\n      filteredOptions: newOptions,\n      keyword\n    });\n  }\n\n  reload() {\n    const reload = this.props.reloadOptions;\n    reload && reload();\n  }\n\n  renderTable() {\n    const {filteredOptions} = this.state;\n\n    const {\n      classnames: cx,\n      classPrefix: ns,\n      selectedOptions,\n      columns,\n      allTitle,\n      searchable,\n      searchPlaceholder,\n      valueField\n    } = this.props;\n\n    return (\n      <div\n        className={cx(\n          'TransferSelect-allOptions',\n          'TransferSelect-allOptions--table'\n        )}\n      >\n        <div className={cx('TransferSelect-heading')}>\n          <span>{`${allTitle}（${selectedOptions.length}/${\n            filteredOptions.length\n          }）`}</span>\n          {searchable ? (\n            <div className={cx('TransferSelect-searchWrapper')}>\n              <div className={cx('TextControl-input')}>\n                <input\n                  placeholder={searchPlaceholder}\n                  autoComplete=\"off\"\n                  value={this.state.keyword}\n                  onChange={this.handleSearch}\n                />\n                <i className=\"fa fa-search\" />\n              </div>\n            </div>\n          ) : null}\n        </div>\n        <div className={cx('TransferSelect-body')}>\n          <table className={cx('Table-table')}>\n            <thead>\n              <tr>\n                <th className={cx('Table-checkCell')}>\n                  <Checkbox\n                    classPrefix={ns}\n                    partial={selectedOptions.length !== filteredOptions.length}\n                    checked={selectedOptions.length > 0}\n                    onChange={this.handleCheckAll}\n                  />\n                </th>\n                {columns.map((column: any, columnIndex: number) => (\n                  <th key={columnIndex}>{column.label}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {filteredOptions.map((option, optionIndex) => (\n                <tr\n                  className={cx({\n                    [`${ns}Table-tr--odd`]: optionIndex % 2 === 0,\n                    [`${ns}Table-tr--even`]: optionIndex % 2 === 1\n                  })}\n                  key={optionIndex}\n                >\n                  <td>\n                    <Checkbox\n                      classPrefix={ns}\n                      value={false}\n                      checked={find(selectedOptions, (selectedOption: any) => {\n                        return (\n                          selectedOption[valueField || 'value'] ===\n                          option[valueField || 'value']\n                        );\n                      })}\n                      onChange={this.handleCheck.bind(this, option)}\n                    />\n                  </td>\n                  {columns.map((column: any, columnIndex: number) => {\n                    let text = option[column.name] + '';\n                    return <td key={columnIndex}>{text}</td>;\n                  })}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  renderNormal() {\n    const {filteredOptions} = this.state;\n\n    const {\n      classnames: cx,\n      classPrefix: ns,\n      selectedOptions,\n      allTitle,\n      searchable,\n      searchPlaceholder,\n      labelField,\n      valueField\n    } = this.props;\n\n    return (\n      <div\n        className={cx(\n          'TransferSelect-allOptions',\n          'TransferSelect-allOptions--normal'\n        )}\n      >\n        <div className={cx('TransferSelect-heading')}>\n          <span>{`${allTitle}（${selectedOptions.length}/${\n            filteredOptions.length\n          }）`}</span>\n          {selectedOptions.length < filteredOptions.length ? (\n            <span\n              onClick={this.handleCheckAll}\n              className={cx('TransferSelect-selectAll')}\n            >\n              全部选择\n            </span>\n          ) : null}\n        </div>\n        <div className={cx('TransferSelect-body')}>\n          {searchable ? (\n            <div className={cx('TransferSelect-searchWrapper')}>\n              <div className={cx('TextControl-input')}>\n                <input\n                  placeholder={searchPlaceholder}\n                  autoComplete=\"off\"\n                  onChange={this.handleSearch}\n                />\n                <i className=\"fa fa-search\" />\n              </div>\n            </div>\n          ) : null}\n          <ul>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option: any, optionIndex: number) => (\n                <li key={optionIndex}>\n                  <Checkbox\n                    classPrefix={ns}\n                    checked={\n                      !!find(selectedOptions, (selectedOption: any) => {\n                        return (\n                          selectedOption[valueField || 'value'] ===\n                          option[valueField || 'value']\n                        );\n                      })\n                    }\n                    onChange={this.handleCheck.bind(this, option)}\n                  >\n                    {option[labelField || 'label']}\n                  </Checkbox>\n                </li>\n              ))\n            ) : (\n              <li>暂无数据</li>\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  renderAction() {\n    const {classnames: cx} = this.props;\n\n    return (\n      <div className={cx('TransferSelect-action')}>\n        <span className={cx('TransferSelect-actionIcon')} />\n      </div>\n    );\n  }\n\n  renderTableSelectedOptions() {\n    const {\n      classnames: cx,\n      selectedOptions,\n      selectedTitle,\n      labelField,\n      columns\n    } = this.props;\n\n    return (\n      <div\n        className={cx(\n          'TransferSelect-selectedOptions',\n          'TransferSelect-selectedOptions--table'\n        )}\n      >\n        <div className={cx('TransferSelect-heading')}>\n          <span>{`${selectedTitle}（${selectedOptions.length}）`}</span>\n          {selectedOptions.length > 0 ? (\n            <span\n              onClick={this.handleClear}\n              className={cx('TransferSelect-clearAll')}\n            >\n              全部清除\n            </span>\n          ) : null}\n        </div>\n        <div className={cx('TransferSelect-body')}>\n          <table className={cx('Table-table')}>\n            <thead>\n              <tr>\n                <th>\n                  {find(columns, column => column.name === labelField).label}\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {selectedOptions.map((option: Option, optionIndex: number) => (\n                <tr className={cx('Table-tr--odd')} key={optionIndex}>\n                  <td>\n                    {option[labelField || 'label']}\n                    <a\n                      onClick={this.handleCheck.bind(this, option)}\n                      className={cx('TransferSelect-option-close')}\n                    >\n                      <Icon icon=\"close\" className=\"icon\" />\n                    </a>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  renderNormalSelectedOptions() {\n    const {\n      classnames: cx,\n      selectedOptions,\n      selectedTitle,\n      labelField\n    } = this.props;\n\n    return (\n      <div\n        className={cx(\n          'TransferSelect-selectedOptions',\n          'TransferSelect-selectedOptions--normal'\n        )}\n      >\n        <div className={cx('TransferSelect-heading')}>\n          <span>{`${selectedTitle}（${selectedOptions.length}）`}</span>\n          {selectedOptions.length > 0 ? (\n            <span\n              onClick={this.handleClear}\n              className={cx('TransferSelect-clearAll')}\n            >\n              全部清除\n            </span>\n          ) : null}\n        </div>\n        <div className={cx('TransferSelect-body')}>\n          <ul>\n            {selectedOptions.map((option: any, optionIndex: number) => (\n              <li key={optionIndex}>\n                {option[labelField || 'label']}\n                <a\n                  onClick={this.handleCheck.bind(this, option)}\n                  className={cx('TransferSelect-option-close')}\n                >\n                  {closeIcon}\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const {className, classnames: cx, render, viewMode, loading} = this.props;\n    return (\n      <div className={cx('TransferSelectControl', className)}>\n        {viewMode === 'table' ? this.renderTable() : this.renderNormal()}\n\n        {this.renderAction()}\n\n        {viewMode === 'table'\n          ? this.renderTableSelectedOptions()\n          : this.renderNormalSelectedOptions()}\n\n        <Spinner size=\"lg\" overlay key=\"info\" show={loading} />\n      </div>\n    );\n  }\n}\n\n@OptionsControl({\n  type: 'transfer-select'\n})\nexport class TransferSelectControlRenderer extends TransferSelect {}\n"
    ]
}