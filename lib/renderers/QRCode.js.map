{
    "version": 3,
    "file": "QRCode.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/QRCode.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,kEAA4B;AAC5B,sCAAmD;AACnD,oCAAuD;AACvD,oCAAoC;AACpC,qCAAwC;AAUxC;IAAoC,kCAAiC;IAArE;;IAsCA,CAAC;IA7BC,uBAAM,GAAN;QACQ,IAAA,eAUQ,EATZ,wBAAS,EACT,sBAAQ,EACR,oCAAe,EACf,oCAAe,EACf,4BAAW,EACX,gBAAK,EACL,gBAAK,EACL,cAAI,EACJ,mBACY,CAAC;QAEf,OAAO,CACL,uCAAK,SAAS,EAAE,oBAAE,CAAI,EAAE,WAAQ,EAAE,SAAS,CAAC,IACzC,KAAK,CAAC,CAAC,CAAC,CACP,8BAAC,MAAM,IACL,KAAK,EAAE,YAAM,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,EACnC,IAAI,EAAE,QAAQ,EACd,OAAO,EAAE,eAAe,EACxB,OAAO,EAAE,eAAe,EACxB,KAAK,EAAE,KAAK,IAAI,GAAG,GACnB,CACH,CAAC,CAAC,CAAC,CACF,wCAAM,SAAS,EAAK,EAAE,wBAAqB,IAAG,WAAW,CAAQ,CAClE,CACG,CACP,CAAC;IACJ,CAAC;IApCM,mBAAY,GAAyB;QAC1C,QAAQ,EAAE,GAAG;QACb,eAAe,EAAE,MAAM;QACvB,eAAe,EAAE,MAAM;QACvB,KAAK,EAAE,GAAG;QACV,WAAW,EAAE,GAAG;KACjB,CAAC;IA+BJ,aAAC;CAAA,AAtCD,CAAoC,eAAK,CAAC,SAAS,GAsClD;kBAtCoB,MAAM;AA4C3B;IAAoC,0CAAM;IAA1C;;IAA4C,CAAC;IAAhC,cAAc;QAJ1B,kBAAQ,CAAC;YACR,IAAI,EAAE,kBAAkB;YACxB,IAAI,EAAE,QAAQ;SACf,CAAC;OACW,cAAc,CAAkB;IAAD,qBAAC;CAAA,AAA7C,CAAoC,MAAM,GAAG;AAAhC,wCAAc;AAM3B;IAA2C,iDAAM;IAAjD;;IAAmD,CAAC;IAAvC,qBAAqB;QAJjC,eAAQ,CAAC;YACR,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,KAAK;SACnB,CAAC;OACW,qBAAqB,CAAkB;IAAD,4BAAC;CAAA,AAApD,CAA2C,MAAM,GAAG;AAAvC,sDAAqB",
    "sourcesContent": [
        "import React from 'react';\nimport cx from 'classnames';\nimport {Renderer, RendererProps} from '../factory';\nimport {FormItem, FormControlProps} from './Form/Item';\nimport {filter} from '../utils/tpl';\nimport QrCode = require('qrcode.react');\n\nexport interface QRCodeProps extends FormControlProps {\n  codeSize?: number;\n  backgroundColor?: string;\n  foregroundColor?: string;\n  level?: string;\n  placeholder: string;\n}\n\nexport default class QRCode extends React.Component<QRCodeProps, any> {\n  static defaultProps: Partial<QRCodeProps> = {\n    codeSize: 128,\n    backgroundColor: '#fff',\n    foregroundColor: '#000',\n    level: 'L',\n    placeholder: '-'\n  };\n\n  render() {\n    const {\n      className,\n      codeSize,\n      backgroundColor,\n      foregroundColor,\n      placeholder,\n      level,\n      value,\n      data,\n      classPrefix: ns\n    } = this.props;\n\n    return (\n      <div className={cx(`${ns}QrCode`, className)}>\n        {value ? (\n          <QrCode\n            value={filter(value, data, '| raw')}\n            size={codeSize}\n            bgColor={backgroundColor}\n            fgColor={foregroundColor}\n            level={level || 'L'}\n          />\n        ) : (\n          <span className={`${ns}QrCode--placeholder`}>{placeholder}</span>\n        )}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)qr\\-?code$/,\n  name: 'qrcode'\n})\nexport class QRCodeRenderer extends QRCode {}\n\n@FormItem({\n  type: 'qr-code',\n  sizeMutable: false\n})\nexport class QRCodeControlRenderer extends QRCode {}\n"
    ]
}