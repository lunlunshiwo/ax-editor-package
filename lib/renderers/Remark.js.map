{
    "version": 3,
    "file": "Remark.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Remark.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,sCAAmD;AAGnD,wFAA0D;AAC1D,oCAAoC;AAEpC,SAAgB,cAAc,CAC5B,OAGqD,EACrD,IAAS;IAET,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAO,YAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC9B;SAAM,IAAI,OAAO,EAAE;QAClB,OAAO,OAAO,CAAC,KAAK;YAClB,CAAC,CAAC;gBACE,KAAK,EAAE,YAAM,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;gBAClC,OAAO,EACL,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI;oBAC7B,CAAC,CAAC,YAAM,CAAC,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC;oBACrD,CAAC,CAAC,SAAS;aAChB;YACH,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI;gBACjC,CAAC,CAAC,YAAM,CAAC,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC;gBACrD,CAAC,CAAC,SAAS,CAAC;KACf;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAvBD,wCAuBC;AAWD;IAAoC,kCAA4B;IAAhE;;IA4CA,CAAC;IArCC,uBAAM,GAAN;QACQ,IAAA,eAYQ,EAXZ,wBAAS,EACT,cAAI,EACJ,oBAAO,EACP,wBAAS,EACT,wBAAS,EACT,oBAAO,EACP,wBAAS,EACT,mBAAe,EACf,kBAAc,EACd,oBAAO,EACP,cACY,CAAC;QAEf,OAAO,CACL,8BAAC,wBAAc,IACb,WAAW,EAAE,EAAE,EACf,UAAU,EAAE,EAAE,EACd,OAAO,EAAE,cAAc,CAAC,OAAO,IAAI,OAAO,EAAE,IAAI,CAAC,EACjD,SAAS,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,SAAS,EACtD,SAAS,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,SAAS,EACtD,OAAO,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,EAChD,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,OAAO,IAAI,OAAO,CAAC,KAAK;YAE/B,uCACE,SAAS,EAAE,EAAE,CACX,QAAQ,EACR,CAAC,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,SAAS,IAAI,iBAAiB,CACjE;gBAED,qCAAG,SAAS,EAAE,EAAE,CAAC,aAAa,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAI,CAClE,CACS,CAClB,CAAC;IACJ,CAAC;IA1CM,gBAAS,GAAkB,EAAE,CAAC;IAC9B,mBAAY,GAAG;QACpB,IAAI,EAAE,uBAAuB;QAC7B,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;KAC5B,CAAC;IAuCJ,aAAC;CAAA,AA5CD,CAAoC,eAAK,CAAC,SAAS,GA4ClD;kBA5CoB,MAAM;AAkD3B;IAAoC,0CAAM;IAA1C;;IAA4C,CAAC;IAAhC,cAAc;QAJ1B,kBAAQ,CAAC;YACR,IAAI,EAAE,eAAe;YACrB,IAAI,EAAE,QAAQ;SACf,CAAC;OACW,cAAc,CAAkB;IAAD,qBAAC;CAAA,AAA7C,CAAoC,MAAM,GAAG;AAAhC,wCAAc",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {Api, SchemaNode, Schema, Action} from '../types';\nimport cx from 'classnames';\nimport TooltipWrapper from '../components/TooltipWrapper';\nimport {filter} from '../utils/tpl';\n\nexport function filterContents(\n  tooltip:\n    | string\n    | undefined\n    | {title?: string; content?: string; body?: string},\n  data: any\n) {\n  if (typeof tooltip === 'string') {\n    return filter(tooltip, data);\n  } else if (tooltip) {\n    return tooltip.title\n      ? {\n          title: filter(tooltip.title, data),\n          content:\n            tooltip.content || tooltip.body\n              ? filter(tooltip.content || tooltip.body || '', data)\n              : undefined\n        }\n      : tooltip.content || tooltip.body\n      ? filter(tooltip.content || tooltip.body || '', data)\n      : undefined;\n  }\n  return tooltip;\n}\n\ntype RemarkProps = {\n  icon: string;\n  className?: string;\n  trigger: Array<string>;\n  title?: string;\n  content: string;\n  placement?: string;\n} & RendererProps;\n\nexport default class Remark extends React.Component<RemarkProps> {\n  static propsList: Array<string> = [];\n  static defaultProps = {\n    icon: 'fa fa-question-circle',\n    trigger: ['hover', 'focus']\n  };\n\n  render() {\n    const {\n      className,\n      icon,\n      tooltip,\n      placement,\n      rootClose,\n      trigger,\n      container,\n      classPrefix: ns,\n      classnames: cx,\n      content,\n      data\n    } = this.props;\n\n    return (\n      <TooltipWrapper\n        classPrefix={ns}\n        classnames={cx}\n        tooltip={filterContents(tooltip || content, data)}\n        placement={(tooltip && tooltip.placement) || placement}\n        rootClose={(tooltip && tooltip.rootClose) || rootClose}\n        trigger={(tooltip && tooltip.trigger) || trigger}\n        container={container}\n        delay={tooltip && tooltip.delay}\n      >\n        <div\n          className={cx(\n            `Remark`,\n            (tooltip && tooltip.className) || className || `Remark--warning`\n          )}\n        >\n          <i className={cx('Remark-icon', (tooltip && tooltip.icon) || icon)} />\n        </div>\n      </TooltipWrapper>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)remark$/,\n  name: 'remark'\n})\nexport class RemarkRenderer extends Remark {}\n"
    ]
}