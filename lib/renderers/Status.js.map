{
    "version": 3,
    "file": "Status.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Status.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA,wDAA0B;AAC1B,sCAAmD;AAGnD,oCAAoC;AASpC;IAAiC,uCAAoC;IAArE;;IAwDA,CAAC;IA3CC,4BAAM,GAAN;QACQ,IAAA,eAOQ,EANZ,wBAAS,EACT,4BAAW,EACX,YAAG,EACH,sBAAQ,EACR,kBAAc,EACd,cACY,CAAC;QACf,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC7B,IAAI,SAAS,GAAoB,CAC/B,wCAAM,SAAS,EAAC,YAAY,IAAE,WAAW,CAAQ,CAClD,CAAC;QACF,IAAI,aAAa,GAAW,EAAE,CAAC;QAE/B,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,EAAE,IAAI,GAAG,EAAE;YAC9C,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;gBAC9B,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACvB;iBAAM,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC9B,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;aAClC;YAED,aAAa,GAAG,kBAAgB,KAAO,CAAC;YACxC,SAAS,GAAG,CACV,qCAAG,SAAS,EAAE,EAAE,CAAC,kBAAkB,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAC,MAAM,GAAG,CAChE,CAAC;YAEF,IAAI,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC/B,SAAS,GAAG;oBACV,SAAS;oBACT,wCAAM,SAAS,EAAE,EAAE,CAAC,mBAAmB,CAAC,EAAE,GAAG,EAAC,OAAO,IAClD,YAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CACzB;iBACR,CAAC;aACH;SACF;QAED,OAAO,CACL,wCAAM,SAAS,EAAE,EAAE,CAAC,aAAa,EAAE,aAAa,EAAE,SAAS,CAAC,IACzD,SAAS,CACL,CACR,CAAC;IACJ,CAAC;IAtDM,wBAAY,GAAyB;QAC1C,WAAW,EAAE,GAAG;QAChB,GAAG,EAAE;YACH,CAAC,EAAE,yBAAyB;YAC5B,CAAC,EAAE,0BAA0B;SAC9B;QACD,QAAQ,EAAE;QACR,WAAW;QACX,UAAU;SACX;KACF,CAAC;IA6CJ,kBAAC;CAAA,AAxDD,CAAiC,eAAK,CAAC,SAAS,GAwD/C;AAxDY,kCAAW;AA8DxB;IAAyC,+CAAW;IAApD;;IAAsD,CAAC;IAA1C,mBAAmB;QAJ/B,kBAAQ,CAAC;YACR,IAAI,EAAE,eAAe;YACrB,IAAI,EAAE,QAAQ;SACf,CAAC;OACW,mBAAmB,CAAuB;IAAD,0BAAC;CAAA,AAAvD,CAAyC,WAAW,GAAG;AAA1C,kDAAmB",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {ServiceStore, IServiceStore} from '../store/service';\nimport {Api, SchemaNode, PlainObject} from '../types';\nimport {filter} from '../utils/tpl';\nimport cx from 'classnames';\n\nexport interface StatusProps extends RendererProps {\n  className?: string;\n  placeholder?: string;\n  map: PlainObject;\n}\n\nexport class StatusField extends React.Component<StatusProps, object> {\n  static defaultProps: Partial<StatusProps> = {\n    placeholder: '-',\n    map: {\n      0: 'fa fa-times text-danger',\n      1: 'fa fa-check text-success'\n    },\n    labelMap: {\n      // 0: '失败',\n      // 1: '成功'\n    }\n  };\n\n  render() {\n    const {\n      className,\n      placeholder,\n      map,\n      labelMap,\n      classnames: cx,\n      data\n    } = this.props;\n    let value = this.props.value;\n    let viewValue: React.ReactNode = (\n      <span className=\"text-muted\">{placeholder}</span>\n    );\n    let wrapClassName: string = '';\n\n    if (value !== undefined && value !== '' && map) {\n      if (typeof value === 'boolean') {\n        value = value ? 1 : 0;\n      } else if (/^\\d+$/.test(value)) {\n        value = parseInt(value, 10) || 0;\n      }\n\n      wrapClassName = `StatusField--${value}`;\n      viewValue = (\n        <i className={cx('StatusField-icon', map[value])} key=\"icon\" />\n      );\n\n      if (labelMap && labelMap[value]) {\n        viewValue = [\n          viewValue,\n          <span className={cx('StatusField-label')} key=\"label\">\n            {filter(labelMap[value], data)}\n          </span>\n        ];\n      }\n    }\n\n    return (\n      <span className={cx('StatusField', wrapClassName, className)}>\n        {viewValue}\n      </span>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)status$/,\n  name: 'status'\n})\nexport class StatusFieldRenderer extends StatusField {}\n"
    ]
}