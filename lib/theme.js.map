{
    "version": 3,
    "file": "theme.js",
    "sourceRoot": "",
    "sources": [
        "/src/theme.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "// 主题管理\nimport cx from 'classnames';\nimport React from 'react';\nimport hoistNonReactStatic = require('hoist-non-react-statics');\nimport {ExtractProps, Omit} from './types';\nimport PropTypes from 'prop-types';\n\nexport type ClassValue =\n  | string\n  | number\n  | ClassDictionary\n  | ClassArray\n  | undefined\n  | null\n  | boolean;\n\ninterface ClassDictionary {\n  [id: string]: any;\n}\n\n// This is the only way I found to break circular references between ClassArray and ClassValue\n// https://github.com/Microsoft/TypeScript/issues/3496#issuecomment-128553540\ninterface ClassArray extends Array<ClassValue> {} // tslint:disable-line no-empty-interface\n\nexport type ClassNamesFn = (...classes: ClassValue[]) => string;\n\ninterface ThemeConfig {\n  classPrefix?: string;\n  renderers?: {\n    [propName: string]: any;\n  };\n\n  [propsName: string]: any;\n}\n\nconst themes: {\n  [propName: string]: ThemeConfig;\n} = {\n  default: {}\n};\n\nexport function theme(name: string, config: Partial<ThemeConfig>) {\n  themes[name] = {\n    ...config\n  };\n}\n\nconst fns: {\n  [propName: string]: (...classes: ClassValue[]) => string;\n} = {};\nexport function makeClassnames(ns?: string) {\n  if (ns && fns[ns]) {\n    return fns[ns];\n  }\n\n  const fn = (...classes: ClassValue[]) => {\n    const str = cx(...(classes as any));\n    return str && ns\n      ? str\n          .replace(/(^|\\s)([A-Z])/g, '$1' + ns + '$2')\n          .replace(/(^|\\s)\\:/g, '$1')\n      : str || '';\n  };\n\n  ns && (fns[ns] = fn);\n  return fn;\n}\n\nexport type ThemeInstance = ThemeConfig & {\n  getRendererConfig: (name?: string) => any;\n  classnames: ClassNamesFn;\n};\n\nexport function hasTheme(theme: string): boolean {\n  return !!themes[theme];\n}\n\nexport function setDefaultTheme(theme: string) {\n  if (hasTheme(theme)) {\n    defaultTheme = theme;\n  }\n}\n\nexport function classnames(...classes: ClassValue[]) {\n  return getTheme(defaultTheme).classnames(...classes);\n}\n\nexport function getClassPrefix() {\n  return getTheme(defaultTheme).classPrefix;\n}\n\nexport function getTheme(theme: string): ThemeInstance {\n  if (!themes[theme]) {\n    throw new Error(`Theme with name \"${theme}\" does not exist!`);\n  }\n\n  const config = themes[theme];\n\n  if (!config.getRendererConfig) {\n    config.getRendererConfig = (name?: string) =>\n      config.renderers && name ? config.renderers[name] : null;\n  }\n\n  if (!config.classnames) {\n    const ns = config.classPrefix;\n    config.classnames = config.classnames || makeClassnames(ns);\n  }\n\n  return config as ThemeInstance;\n}\n\nexport interface ThemeProps {\n  classPrefix: string;\n  classnames: ClassNamesFn;\n}\n\nexport const ThemeContext = React.createContext('theme');\nexport let defaultTheme: string = 'default';\n\nexport function themeable<\n  T extends React.ComponentType<ThemeProps & ExtractProps<T>>\n>(ComposedComponent: T) {\n  type ComposedProps = JSX.LibraryManagedAttributes<T, ExtractProps<T>>;\n  type Props = Omit<ComposedProps, keyof ThemeProps> & {\n    theme?: string;\n    classPrefix?: string;\n    classnames?: ClassNamesFn;\n  };\n\n  class EnhancedComponent extends React.Component<Props> {\n    static displayName = `Themeable(${ComposedComponent.displayName ||\n      ComposedComponent.name})`;\n    static contextType = ThemeContext;\n    static ComposedComponent = ComposedComponent;\n\n    render() {\n      const theme: string = this.props.theme || this.context || defaultTheme;\n      const config = hasTheme(theme) ? getTheme(theme) : getTheme(defaultTheme);\n      const injectedProps: {\n        classPrefix: string;\n        classnames: ClassNamesFn;\n      } = {\n        classPrefix: config.classPrefix as string,\n        classnames: config.classnames\n      };\n\n      return (\n        <ThemeContext.Provider value={theme}>\n          <ComposedComponent\n            {\n              ...this.props as any /* todo, 解决这个类型问题 */\n            }\n            {...injectedProps}\n          />\n        </ThemeContext.Provider>\n      );\n    }\n  }\n\n  return hoistNonReactStatic(\n    EnhancedComponent,\n    ComposedComponent\n  ) as React.ComponentClass<Props> & {\n    ComposedComponent: T;\n  };\n}\n"
    ]
}