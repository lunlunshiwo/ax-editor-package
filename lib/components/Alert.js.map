{
    "version": 3,
    "file": "Alert.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Alert.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file Alert\n * @author fex\n */\n\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Modal from './Modal';\nimport Button from './Button';\nimport {ClassNamesFn, themeable} from '../theme';\n\nexport interface AlertProps {\n  container?: any;\n  confirmText?: string;\n  cancelText?: string;\n  title?: string;\n  confirmBtnLevel?: string;\n  alertBtnLevel?: string;\n  classPrefix: string;\n  classnames: ClassNamesFn;\n  theme?: string;\n}\n\nexport interface AlertState {\n  show: boolean;\n  title?: string;\n  content: string;\n  confirm: boolean;\n}\n\nexport class Alert extends React.Component<AlertProps, AlertState> {\n  static instance: any = null;\n  static getInstance() {\n    if (!Alert.instance) {\n      console.warn('Alert 组件应该没有被渲染，所以隐性的渲染到 body 了');\n      const container = document.body;\n      const div = document.createElement('div');\n      container.appendChild(div);\n      render(<ThemedAlert />, div);\n    }\n\n    return Alert.instance;\n  }\n\n  _resolve: (value: any) => void;\n  _modal: any;\n  _body: any;\n  state: AlertState = {\n    show: false,\n    title: '',\n    content: '',\n    confirm: false\n  };\n  constructor(props: AlertProps) {\n    super(props);\n\n    this.close = this.close.bind(this);\n    this.handleConfirm = this.handleConfirm.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.modalRef = this.modalRef.bind(this);\n    this.bodyRef = this.bodyRef.bind(this);\n  }\n\n  static defaultProps = {\n    confirmText: '确认',\n    cancelText: '取消',\n    title: '系统消息',\n    alertBtnLevel: 'primary',\n    confirmBtnLevel: 'danger'\n  };\n\n  componentWillMount() {\n    Alert.instance = this;\n  }\n\n  componentDidMount() {\n    this._body && (this._body.innerHTML = this.state.content);\n  }\n\n  componentDidUpdate(prevProps: AlertProps, prevState: AlertState) {\n    if (prevState.content !== this.state.content) {\n      this._body && (this._body.innerHTML = this.state.content);\n    }\n  }\n\n  componentWillUnmount() {\n    Alert.instance = null;\n  }\n\n  handleConfirm() {\n    this.close(true);\n  }\n\n  handleCancel() {\n    this.close(false);\n  }\n\n  close(confirmed: boolean) {\n    const isConfirm = this.state.confirm;\n\n    this.setState(\n      {\n        show: false\n      },\n      isConfirm ? () => this._resolve(confirmed) /*this._reject()*/ : undefined\n    );\n  }\n\n  alert(content: string, title?: string) {\n    this.setState({\n      title,\n      content,\n      show: true,\n      confirm: false\n    });\n  }\n\n  confirm(content: string, title?: string) {\n    this.setState({\n      title,\n      content,\n      show: true,\n      confirm: true\n    });\n\n    return new Promise(resolve => {\n      this._resolve = resolve;\n    });\n  }\n\n  modalRef(ref: any) {\n    this._modal = ref;\n  }\n\n  bodyRef(ref: any) {\n    this._body = ref;\n    this._body && (this._body.innerHTML = this.state.content);\n  }\n\n  render() {\n    const {\n      container,\n      cancelText,\n      confirmText,\n      title,\n      confirmBtnLevel,\n      alertBtnLevel,\n      classnames: cx,\n      classPrefix\n    } = this.props;\n    return (\n      <Modal\n        show={this.state.show}\n        onHide={this.handleCancel}\n        container={container}\n        ref={this.modalRef}\n      >\n        <div className={cx('Modal-header')}>\n          <div className={cx('Modal-title')}>{this.state.title || title}</div>\n        </div>\n        <div className={cx('Modal-body')}>\n          <div ref={this.bodyRef} />\n        </div>\n        <div className={cx('Modal-footer')}>\n          {this.state.confirm ? (\n            <Button onClick={this.handleCancel}>{cancelText}</Button>\n          ) : null}\n          <Button\n            level={this.state.confirm ? confirmBtnLevel : alertBtnLevel}\n            onClick={this.handleConfirm}\n          >\n            {confirmText}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport const alert: (content: string, title?: string) => void = (\n  content,\n  title\n) => Alert.getInstance().alert(content, title);\nexport const confirm: (content: string, title?: string) => Promise<any> = (\n  content,\n  title\n) => Alert.getInstance().confirm(content, title);\nexport const ThemedAlert = themeable(Alert);\nexport default ThemedAlert;\n"
    ]
}