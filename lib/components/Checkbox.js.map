{
    "version": 3,
    "file": "Checkbox.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Checkbox.tsx"
    ],
    "names": [],
    "mappings": ";AAAA;;;GAGG;;;AAEH,wDAA0B;AAE1B,kCAAiD;AACjD,0CAAyC;AACzC,oCAAoC;AAEpC,IAAM,OAAO,GAAG;IACd,EAAE,EAAE,aAAa;IACjB,EAAE,EAAE,aAAa;IACjB,KAAK,EAAE,aAAa;IACpB,KAAK,EAAE,aAAa;CACrB,CAAC;AA4BF;IAA8B,oCAAmC;IAAjE;;IAmEA,CAAC;IA3DC,8BAAW,GAAX,UAAY,CAAyB;QAC7B,IAAA,eAA8C,EAA7C,wBAAS,EAAE,0BAAU,EAAE,sBAAsB,CAAC;QAErD,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QAED,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC7D,CAAC;IAED,yBAAM,GAAN;;QACM,IAAA,eAiBU,EAhBZ,cAAI,EACJ,wBAAS,EACT,kBAAc,EACd,gBAAK,EACL,gBAAK,EACL,oBAAO,EACP,wBAAS,EACT,sBAAQ,EACR,sBAAQ,EACR,4BAAW,EACX,sBAAQ,EACR,oBAAO,EACP,cAAI,EACJ,cAAI,EACJ,cAAI,EACJ,kCACY,CAAC;QAEf,OAAO,CACL,yCACE,SAAS,EAAE,EAAE,CAAC,wBAAsB,IAAM,EAAE,SAAS;oBACnD,gBAAgB,EAAE,CAAC,OAAO;;gBAC1B,GAAC,eAAa,IAAM,IAAG,IAAI;oBAC3B;YAEF,yCACE,IAAI,EAAE,IAAI,EACV,OAAO,EACL,OAAO,OAAO,KAAK,WAAW;oBAC5B,CAAC,CAAC,OAAO;oBACT,CAAC,CAAC,OAAO,KAAK,KAAK,WAAW;wBAC9B,CAAC,CAAC,KAAK;wBACP,CAAC,CAAC,KAAK,IAAI,SAAS,EAExB,QAAQ,EAAE,IAAI,CAAC,WAAW,EAC1B,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,EAClB,IAAI,EAAE,IAAI,GACV;YACF,wCAAK;YACL,wCAAM,SAAS,EAAE,EAAE,CAAC,cAAc,CAAC,IAAG,QAAQ,IAAI,KAAK,CAAQ;YAC9D,WAAW,CAAC,CAAC,CAAC,CACb,uCAAK,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC,IAAG,YAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAO,CACvE,CAAC,CAAC,CAAC,IAAI,CACF,CACT,CAAC;IACJ,CAAC;;IAjEM,qBAAY,GAAG;QACpB,SAAS,EAAE,IAAI;QACf,UAAU,EAAE,KAAK;QACjB,IAAI,EAAE,UAAU;KACjB,CAAC;IAGF;QADC,iBAAQ;;qEACM,eAAK,oBAAL,eAAK,CAAC,WAAW;;+CAQ/B;IAmDH,eAAC;CAAA,AAnED,CAA8B,eAAK,CAAC,SAAS,GAmE5C;AAnEY,4BAAQ;AAqErB,kBAAe,iBAAS,CAAC,QAAQ,CAAC,CAAC",
    "sourcesContent": [
        "/**\n * @file Checkbox\n * @author fex\n */\n\nimport React from 'react';\nimport cx from 'classnames';\nimport {ClassNamesFn, themeable} from '../theme';\nimport {autobind} from '../utils/helper';\nimport {filter} from '../utils/tpl';\n\nconst sizeMap = {\n  sm: 'i-checks-sm',\n  lg: 'i-checks-lg',\n  small: 'i-checks-sm',\n  large: 'i-checks-lg'\n};\n\ninterface CheckboxProps {\n  id?: string;\n  key?: string | number;\n  style?: React.CSSProperties;\n  type: 'checkbox' | 'radio';\n  size?: 'sm' | 'lg' | 'small' | 'large';\n  label?: string;\n  labelClassName?: string;\n  className?: string;\n  onChange?: (value: any) => void;\n  value?: any;\n  containerClass?: string;\n  inline?: boolean;\n  trueValue?: boolean;\n  falseValue?: boolean;\n  disabled?: boolean;\n  readOnly?: boolean;\n  checked?: boolean;\n  name?: string;\n  description?: string;\n  classPrefix: string;\n  classnames: ClassNamesFn;\n  partial?: boolean;\n  data?: any;\n}\n\nexport class Checkbox extends React.Component<CheckboxProps, any> {\n  static defaultProps = {\n    trueValue: true,\n    falseValue: false,\n    type: 'checkbox'\n  };\n\n  @autobind\n  handleCheck(e: React.ChangeEvent<any>) {\n    const {trueValue, falseValue, onChange} = this.props;\n\n    if (!onChange) {\n      return;\n    }\n\n    onChange(e.currentTarget.checked ? trueValue : falseValue);\n  }\n\n  render() {\n    let {\n      size,\n      className,\n      classnames: cx,\n      value,\n      label,\n      partial,\n      trueValue,\n      children,\n      disabled,\n      description,\n      readOnly,\n      checked,\n      type,\n      name,\n      data,\n      labelClassName\n    } = this.props;\n\n    return (\n      <label\n        className={cx(`Checkbox Checkbox--${type}`, className, {\n          'Checkbox--full': !partial,\n          [`Checkbox--${size}`]: size\n        })}\n      >\n        <input\n          type={type}\n          checked={\n            typeof checked !== 'undefined'\n              ? checked\n              : typeof value === 'undefined'\n              ? value\n              : value == trueValue\n          }\n          onChange={this.handleCheck}\n          disabled={disabled}\n          readOnly={readOnly}\n          name={name}\n        />\n        <i />\n        <span className={cx(labelClassName)}>{children || label}</span>\n        {description ? (\n          <div className={cx('Checkbox-desc')}>{filter(description, data)}</div>\n        ) : null}\n      </label>\n    );\n  }\n}\n\nexport default themeable(Checkbox);\n"
    ]
}