{
    "version": 3,
    "file": "Checkboxes.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Checkboxes.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file Checkboxes\n * @description 多选输入框\n * @author fex\n */\n\nimport React from 'react';\nimport uncontrollable = require('uncontrollable');\nimport Checkbox from './Checkbox';\nimport find = require('lodash/find');\nimport chunk = require('lodash/chunk');\nimport {flattenTree, isObject} from '../utils/helper';\nimport {Option} from './Checkboxes';\nimport {ClassNamesFn, themeable} from '../theme';\n// import isPlainObject = require('lodash/isPlainObject');\n\nexport interface Option {\n  label?: string;\n  value?: any;\n  disabled?: boolean;\n  children?: Options;\n  description?: string;\n  [propName: string]: any;\n}\nexport interface Options extends Array<Option> {}\n\nexport interface OptionProps {\n  multi?: boolean;\n  multiple?: boolean;\n  valueField?: string;\n  options?: Options;\n  joinValues: boolean;\n  extractValue: boolean;\n  delimiter: string;\n  clearable: boolean;\n  placeholder?: string;\n}\n\nexport type OptionValue = string | number | null | undefined | Option;\n\nexport function value2array(\n  value: OptionValue | Array<OptionValue>,\n  props: Partial<OptionProps>\n): Array<Option> {\n  if (props.multi || props.multiple) {\n    if (typeof value === 'string') {\n      value = value.split(props.delimiter || ',');\n    }\n\n    if (!Array.isArray(value)) {\n      if (value === null || value === undefined) {\n        return [];\n      }\n\n      value = [value];\n    }\n\n    return (value as Array<OptionValue>)\n      .map((value: OptionValue) =>\n        expandValue(\n          !props.joinValues &&\n            value &&\n            value.hasOwnProperty(props.valueField || 'value')\n            ? (value as any)[props.valueField || 'value']\n            : value,\n          props\n        )\n      )\n      .filter((item: Option) => item) as Array<Option>;\n  }\n\n  let expandedValue = expandValue(value as OptionValue, props);\n  return expandedValue ? [expandedValue] : [];\n}\n\nexport function expandValue(\n  value: OptionValue,\n  props: Partial<OptionProps>\n): Option | null {\n  const valueType = typeof value;\n\n  if (\n    valueType !== 'string' &&\n    valueType !== 'number' &&\n    valueType !== 'boolean' &&\n    valueType !== 'object'\n  ) {\n    return null;\n  }\n\n  let {options, valueField} = props;\n\n  if (!options) {\n    return null;\n  }\n\n  if (\n    valueType === 'object' &&\n    value &&\n    value.hasOwnProperty(props.valueField || 'value')\n  ) {\n    value = (value as Option)[valueField || 'value'] || '';\n  }\n\n  return find(flattenTree(options), item =>\n    isObject(value)\n      ? item[valueField || 'value'] === value\n      : String(item[valueField || 'value']) === String(value)\n  ) as Option;\n}\n\n/**\n * 参数说明：\n *\n * options: [\n *   {\n *      label: '显示的名字',\n *      value: '值',\n *      disabled: false\n *   }\n * ]\n */\ninterface CheckboxesProps extends OptionProps {\n  id?: string;\n  key?: string;\n  className?: string;\n  type: string;\n  placeholder?: string;\n  disabled?: boolean;\n  value?: string;\n  onChange?: Function;\n  inline?: boolean;\n  columnsCount?: number;\n  checked?: boolean;\n  labelClassName?: string;\n  classPrefix: string;\n  classnames: ClassNamesFn;\n}\n\nexport class Checkboxes extends React.PureComponent<CheckboxesProps, any> {\n  static defaultProps = {\n    joinValues: true,\n    extractValue: false,\n    inline: false,\n    delimiter: ',',\n    columnsCount: 1 // 一行显示一个\n  };\n\n  toggleOption(option: Option) {\n    const {\n      value,\n      onChange,\n      joinValues,\n      extractValue,\n      delimiter,\n      valueField,\n      options\n    } = this.props;\n\n    let valueArray = value2array(value, {\n      multiple: true,\n      valueField,\n      delimiter,\n      options\n    });\n    let idx = valueArray.indexOf(option);\n\n    if (!~idx) {\n      option =\n        value2array(option[valueField || 'value'], {\n          multiple: true,\n          valueField,\n          delimiter,\n          options\n        })[0] || option;\n      idx = valueArray.indexOf(option);\n    }\n\n    if (~idx) {\n      valueArray.splice(idx, 1);\n    } else {\n      valueArray.push(option);\n    }\n\n    let newValue: string | Array<Option> = valueArray;\n\n    if (joinValues) {\n      newValue = newValue\n        .map(item => item[valueField || 'value'])\n        .join(delimiter);\n    } else if (extractValue) {\n      newValue = newValue.map(item => item[valueField || 'value']);\n    }\n\n    onChange && onChange(newValue);\n  }\n\n  render() {\n    const {\n      value,\n      valueField,\n      delimiter,\n      options,\n      className,\n      placeholder,\n      columnsCount,\n      disabled,\n      inline,\n      labelClassName\n    } = this.props;\n\n    let valueArray = value2array(value, {\n      multiple: true,\n      valueField,\n      delimiter,\n      options\n    });\n    let body: Array<React.ReactNode> = [];\n\n    if (options) {\n      body = options.map((option, key) => (\n        <Checkbox\n          key={key}\n          onChange={() => this.toggleOption(option)}\n          checked={!!~valueArray.indexOf(option)}\n          disabled={disabled || option.disabled}\n          inline={inline}\n          labelClassName={labelClassName}\n        >\n          {option.label}\n        </Checkbox>\n      ));\n    }\n\n    if (!inline && (columnsCount as number) > 1) {\n      let cellClassName = `col-sm-${(12 / (columnsCount as number))\n        .toFixed(1)\n        .replace(/\\.0$/, '')\n        .replace(/\\./, '-')}`;\n      body = chunk(body, columnsCount).map((group, groupIndex) => (\n        <div className=\"row\" key={groupIndex}>\n          {group.map((item, index) => (\n            <div key={index} className={cellClassName}>\n              {item}\n            </div>\n          ))}\n        </div>\n      ));\n    }\n\n    return (\n      <div className={className}>\n        {body && body.length ? body : placeholder}\n      </div>\n    );\n  }\n}\n\nexport default themeable(\n  uncontrollable(Checkboxes, {\n    value: 'onChange'\n  })\n);\n"
    ]
}